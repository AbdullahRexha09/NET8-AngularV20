using API.Entities;
using API.Models;
using Microsoft.EntityFrameworkCore;

namespace API.Database
{
    public class AppDbContext: DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options): base(options)
        { }
        public DbSet<Journey> Journey { get; set; }
        public DbSet<Stop> Stop { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<JourneyStop>()
                .HasKey(js => new { js.JourneyId, js.StopId });

            modelBuilder.Entity<JourneyStop>()
                .HasOne(js => js.Journey)
                .WithMany(j => j.JourneyStops)
                .HasForeignKey(js => js.JourneyId);

            modelBuilder.Entity<JourneyStop>()
                .HasOne(js => js.Stop)
                .WithMany(s => s.JourneyStops)
                .HasForeignKey(js => js.StopId);

            // We can Seed data here & yes this text not generated by AI 
            modelBuilder.Entity<Stop>().HasData(
            new Stop { Id = 1, Code = "S001", Name =  "StopOne", Description = "Central Station", X = 40.7128M, Y = -74.0060M },
            new Stop { Id = 2, Code = "S002", Name = "StopTwo", Description = "City Park", X = 40.7130M, Y = -74.0000M },
            new Stop { Id = 3, Code = "S003", Name = "StopThree", Description = "University", X = 40.7140M, Y = -74.0020M },
            new Stop { Id = 4, Code = "S004", Name = "StopFour", Description = "Mall", X = 40.7150M, Y = -74.0050M },
            new Stop { Id = 5, Code = "S005", Name = "StopFive", Description = "Airport", X = 40.7160M, Y = -74.0080M }
        );

            // Global filter 
            modelBuilder.Entity<Journey>().HasQueryFilter(j => !j.IsDel);
            modelBuilder.Entity<Stop>().HasQueryFilter(s => !s.IsDel);
        }
    }
}
